%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <stdarg.h>
	extern FILE *yyin;
	#define YYDEBUG 0
	void yyerror(char *s);
	int yylex(void);
	void success(void);	

%}

%token FOR_TOK WHILE_TOK SWITCH_TOK CASE_TOK IF_TOK ELSE_TOK INTEGER_TOK FLOATING_TOK DOUBLE_TOK CHAR_TOK BREAK_TOK DEFAULT_TOK RETURN_TOK INCLUDE_TOK DEFINE_TOK

%token SEMICOLON_TOK COMMA_TOK DOT_TOK LCURLY_TOK RCURLY_TOK RPAREN_TOK LPAREN_TOK ARRAY_BRACKET_LTOK ARRAY_BRACKET_RTOK

%token ADDITION_TOK INCREMENT_TOK ADDITION_EQUAL_TOK MINUS_TOK DECREMENT_TOK MINUS_EQUAL_TOK MULTIPLICATION_TOK MULTIPLICATION_EQUAL_TOK DIVISION_EQUAL_TOK DIVISION_TOK MODULO_TOK MODULO_EQUAL_TOK RIGHT_SHIFT_TOK GREATER_THAN_EQUAL_TOK GREATER_TOK LEFT_SHIFT_TOK LESS_THAN_EQUAL_TOK LESS_TOK EQUAL_COMPARE_TOK EQUAL_TOK NOT_EQUAL_TOK NOT_TOK BIT_OR_EQUAL_TOK BIT_OR_TOK OR_TOK AND_TOK BIT_AND_EQUAL_TOK BIT_AND_TOK XOR_TOK

%token SPACE_TOK COLON_TOK ID_TOK INT_CONST_TOK COLON_TOK

%right EQUAL_TOK INCREMENT_TOK DECREMENT_TOK
%left OR_TOK AND_TOK EQUAL_COMPARE_TOK NOT_EQUAL_TOK GREATER_THAN_EQUAL_TOK LESS_THAN_EQUAL_TOK GREATER_TOK LESS_TOK LEFT_SHIFT_TOK RIGHT_SHIT_TOK ADDITION_TOK MINUS_TOK MULTIPLICATION_TOK DIVISION_TOK MODULO_TOK
 
%%
programe:
	function {success();}
	;
function:
	function statement
	|
	;
statement:
	SEMICOLON_TOK
	| expression SEMICOLON_TOK
	| reserved_word balanced_paran 		/* bug for(..); and while(..);*/
	| IF_TOK LPAREN_TOK relational_expression RPAREN_TOK statement ELSE_TOK statement
	| SWITCH_TOK LPAREN_TOK ID_TOK RPAREN_TOK LCURLY_TOK case_blocks RCURLY_TOK
	;
balanced_paran:
	LCURLY_TOK nested_statement RCURLY_TOK
	;
nested_statement:
	statement nested_statement
	|
	;
expression:
	INTEGER_TOK ID_TOK
	| FLOATING_TOK ID_TOK
	| DOUBLE_TOK ID_TOK
	| CHAR_TOK ID_TOK
	| ID_TOK
	| INT_CONST_TOK
	| assignment_expression
	| ID_TOK EQUAL_TOK arith_expression
	| relational_expression
	| unary_expression
	| ID_TOK EQUAL_TOK logic_expression
	| logic_expression
//	| case_blocks
	;
arith_expression:  							/* a+2 a-2 a*3 a/4 a%5 left */
	ID_TOK ADDITION_TOK ID_TOK
	| ID_TOK MINUS_TOK ID_TOK
	| ID_TOK MULTIPLICATION_TOK ID_TOK
	| ID_TOK DIVISION_TOK ID_TOK
	| ID_TOK MODULO_TOK ID_TOK
	| ID_TOK RIGHT_SHIFT_TOK ID_TOK
	| ID_TOK LEFT_SHIFT_TOK ID_TOK
	| ID_TOK ADDITION_EQUAL_TOK ID_TOK
	| ID_TOK ADDITION_EQUAL_TOK INT_CONST_TOK
	| ID_TOK MINUS_EQUAL_TOK ID_TOK
	| ID_TOK MINUS_EQUAL_TOK INT_CONST_TOK
	| ID_TOK MULTIPLICATION_EQUAL_TOK ID_TOK
	| ID_TOK MULTIPLICATION_EQUAL_TOK INT_CONST_TOK
	| ID_TOK DIVISION_EQUAL_TOK ID_TOK
	| ID_TOK DIVISION_EQUAL_TOK INT_CONST_TOK
	| ID_TOK MODULO_EQUAL_TOK ID_TOK
	| ID_TOK MODULO_EQUAL_TOK INT_CONST_TOK
	| ID_TOK BIT_OR_EQUAL_TOK ID_TOK
	| ID_TOK BIT_AND_EQUAL_TOK ID_TOK
	| ID_TOK BIT_OR_EQUAL_TOK INT_CONST_TOK
	| ID_TOK BIT_AND_EQUAL_TOK INT_CONST_TOK
	| ID_TOK BIT_OR_TOK ID_TOK
	| ID_TOK BIT_AND_TOK ID_TOK
	| ID_TOK BIT_OR_TOK INT_CONST_TOK
	| ID_TOK BIT_AND_TOK INT_CONST_TOK
	;
relational_expression:
	ID_TOK GREATER_THAN_EQUAL_TOK ID_TOK
	| ID_TOK GREATER_TOK ID_TOK
	| ID_TOK LESS_THAN_EQUAL_TOK ID_TOK
	| ID_TOK LESS_TOK ID_TOK
	| ID_TOK GREATER_THAN_EQUAL_TOK INT_CONST_TOK
	| ID_TOK GREATER_TOK INT_CONST_TOK
	| ID_TOK LESS_THAN_EQUAL_TOK INT_CONST_TOK
	| ID_TOK LESS_TOK INT_CONST_TOK
	| ID_TOK EQUAL_COMPARE_TOK ID_TOK
	| ID_TOK EQUAL_COMPARE_TOK INT_CONST_TOK
	| ID_TOK NOT_EQUAL_TOK ID_TOK
	| ID_TOK NOT_EQUAL_TOK INT_CONST_TOK
	;
unary_expression:
	ID_TOK INCREMENT_TOK
	| ID_TOK DECREMENT_TOK
	| INCREMENT_TOK ID_TOK
	| DECREMENT_TOK ID_TOK
	;
logic_expression:
	ID_TOK OR_TOK ID_TOK
	| ID_TOK AND_TOK ID_TOK
	| ID_TOK XOR_TOK ID_TOK
	| ID_TOK OR_TOK INT_CONST_TOK
	| ID_TOK AND_TOK INT_CONST_TOK
	| ID_TOK XOR_TOK INT_CONST_TOK
	| NOT_TOK ID_TOK
	;
assignment_expression:
	ID_TOK EQUAL_TOK ID_TOK
	| ID_TOK EQUAL_TOK INT_CONST_TOK
	; 
reserved_word:
	FOR_TOK LPAREN_TOK INTEGER_TOK ID_TOK EQUAL_TOK INT_CONST_TOK SEMICOLON_TOK relational_expression SEMICOLON_TOK unary_expression RPAREN_TOK
	| WHILE_TOK LPAREN_TOK relational_expression RPAREN_TOK
//	| SWITCH_TOK LPAREN_TOK ID_TOK RPAREN_TOK LCURLY_TOK case_blocks RCURLY_TOK
	;
case_blocks:
	CASE_TOK INT_CONST_TOK COLON_TOK statement BREAK_TOK SEMICOLON_TOK case_blocks
	|
	;
%%

int main(int argc,char *argv[]){
	#if YYDEBUG
		yydebug = 1;
	#endif
	if (argc == 2){
		yyin = fopen(argv[1],"r");
	}
	yyparse();
	fclose(yyin);
	return 0;
}
void yyerror(char *s){
	printf("%s\n","SORRY some syntax error is there. ........ :(");
}
void success(void){
	printf("%s\n","PARSED SUCCESSFULLY .......... :)");
}